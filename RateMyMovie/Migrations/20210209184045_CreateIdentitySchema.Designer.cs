// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RateMyMovie.Models;

namespace RateMyMovie.Migrations
{
    [DbContext(typeof(MovieDbContext))]
    [Migration("20210209184045_CreateIdentitySchema")]
    partial class CreateIdentitySchema
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:Collation", "French_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("RateMyMovie.Models.CommentSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<long>("Dislike")
                        .HasColumnType("bigint");

                    b.Property<long>("Like")
                        .HasColumnType("bigint");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("Movie_Id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.Property<short>("Value")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "MovieId" }, "IX_FK_NoteMovie");

                    b.HasIndex(new[] { "UserId" }, "IX_FK_UserNote");

                    b.ToTable("CommentSet");
                });

            modelBuilder.Entity("RateMyMovie.Models.GenreMovie", b =>
                {
                    b.Property<int>("GenreId")
                        .HasColumnType("int")
                        .HasColumnName("Genre_Id");

                    b.Property<int>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("Movie_Id");

                    b.HasKey("GenreId", "MovieId");

                    b.HasIndex(new[] { "MovieId" }, "IX_FK_GenreMovie_Movie");

                    b.ToTable("GenreMovie");
                });

            modelBuilder.Entity("RateMyMovie.Models.GenreSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GenreSet");
                });

            modelBuilder.Entity("RateMyMovie.Models.MovieSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Synopsis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MovieSet");
                });

            modelBuilder.Entity("RateMyMovie.Models.UserSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Admin")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserSet");
                });

            modelBuilder.Entity("RateMyMovie.Models.CommentSet", b =>
                {
                    b.HasOne("RateMyMovie.Models.MovieSet", "Movie")
                        .WithMany("CommentSets")
                        .HasForeignKey("MovieId")
                        .HasConstraintName("FK_NoteMovie")
                        .IsRequired();

                    b.HasOne("RateMyMovie.Models.UserSet", "User")
                        .WithMany("CommentSets")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserNote")
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RateMyMovie.Models.GenreMovie", b =>
                {
                    b.HasOne("RateMyMovie.Models.GenreSet", "Genre")
                        .WithMany("GenreMovies")
                        .HasForeignKey("GenreId")
                        .HasConstraintName("FK_GenreMovie_Genre")
                        .IsRequired();

                    b.HasOne("RateMyMovie.Models.MovieSet", "Movie")
                        .WithMany("GenreMovies")
                        .HasForeignKey("MovieId")
                        .HasConstraintName("FK_GenreMovie_Movie")
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("RateMyMovie.Models.GenreSet", b =>
                {
                    b.Navigation("GenreMovies");
                });

            modelBuilder.Entity("RateMyMovie.Models.MovieSet", b =>
                {
                    b.Navigation("CommentSets");

                    b.Navigation("GenreMovies");
                });

            modelBuilder.Entity("RateMyMovie.Models.UserSet", b =>
                {
                    b.Navigation("CommentSets");
                });
#pragma warning restore 612, 618
        }
    }
}
